<?php

/**
 * @file
 * Main module file.
 */

function apiproduct_access_customattr_modulename() {
  $module_name = basename(__FILE__, '.module');
  return $module_name;
}

/**
 * Implements hook_menu().
 */
function apiproduct_access_customattr_menu() {
  $items['admin/config/devconnect/apiproduct-access-customattr'] = array(
    'title' => 'API Product Role Access Custom Attr',
    'description' => 'Settings controlling role-based access to API Products based on custom attribute.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apiproduct_access_customattr_admin_form'),
    'access arguments' => array('administer organization settings'),
  );
  return $items;
}

function apiproduct_access_customattr_user_role_load($rid) {
  $role = user_role_load($rid);
  if ($role) {
    return $role->name;
  }
  return NULL;
}
  
function apiproduct_access_customattr_get_default_roles() {
  $prefix = apiproduct_access_customattr_modulename();
  $want_logging = variable_get($prefix . '_logging', 0);  
  $varname = $prefix . '_defaultroles';
  $default_roles = variable_get($varname, FALSE);
  if ($default_roles === FALSE) {
    $default_roles = array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID);
    if ($want_logging) {
      watchdog($prefix,
               "RBAC default roles assigned: !defaultroles", array('!defaultroles' => print_r($default_roles, TRUE)),
               WATCHDOG_NOTICE);
    }
  }
  else if (is_string($default_roles)) {
    $default_roles = explode(',', $default_roles);
    if ($want_logging) {
      watchdog($prefix,
               "RBAC default role ids read: !defaultroles", array('!defaultroles' => print_r($default_roles, TRUE)),
               WATCHDOG_NOTICE);
    }
  }

  if ($default_roles) {
    $default_roles = array_map($prefix . "_user_role_load", $default_roles);    
    if ($want_logging) {
      watchdog($prefix,
               "RBAC default rolenames: !defaultroles", array('!defaultroles' => print_r($default_roles, TRUE)),
               WATCHDOG_NOTICE);
    }
  }
  else if ($want_logging) {
    watchdog($prefix,
             "RBAC somehow there are no default roles?", array(),
             WATCHDOG_NOTICE);
  }

  return $default_roles;
}

/**
 * Implements hook_apiproduct_list_alter().
 *
 * Checks RBAC access for given API Products.
 */
function apiproduct_access_customattr_apiproduct_list_alter(array &$api_products, stdClass $account) {
  $prefix = apiproduct_access_customattr_modulename();
  $varname = $prefix . '_enabled';
  if (variable_get($varname, 0)) {
    $want_logging = variable_get($prefix . '_logging', 0);
    if ($want_logging) {
      watchdog($prefix, "RBAC enabled, account roles: !roles", array("!roles" => print_r($account->roles, TRUE)), WATCHDOG_NOTICE);
    }
    // $account->roles is like this: 
    // Array ( [2] => authenticated user [4] => gold-partner )

    // default roles will apply when no custom attribute is present on the API Product
    $default_roles = apiproduct_access_customattr_get_default_roles();
    
    //$user_roles = user_roles(TRUE);
    foreach ($api_products as $id => $product) {
      $access_enabled = FALSE;
      if ($want_logging) {
        watchdog($prefix,
                 "Product: !product", array('!product' => print_r($product, TRUE)),
                 WATCHDOG_NOTICE);
      }
      $roles_for_product = NULL;
      if (array_key_exists ( "roles-access", $product->attributes )) {
        $roles_for_product = $product->attributes["roles-access"];
      }
  
      if (is_string($roles_for_product)) {
        // use the rolenames listed in the custom attribute
        if ($want_logging) {
          watchdog($prefix,
                   "p:!productname using stored roles: !roles",
                   array('!productname' => $product->name, '!roles' => $roles_for_product),
                   WATCHDOG_NOTICE);
        }
        $roles_for_product = explode(',', $roles_for_product);
        $roles_for_product = array_map('trim', $roles_for_product);
      }
      else if (is_array($default_roles)) {
        // use the default roles 
        if ($want_logging) {
          watchdog($prefix,
                   "p:!productname using default roles", array('!productname' => $product->name),
                   WATCHDOG_NOTICE);
        }
        $roles_for_product = $default_roles;
      }

      if (is_array($roles_for_product)) {
        foreach ($account->roles as $rid => $user_role_name) {
          if (in_array ( $user_role_name, $roles_for_product)) {
            if ($want_logging) {
              watchdog($prefix,
                       "check p:!productname userrole:!userrole YES", array('!productname' => $product->name,
                                                                            '!userrole' => $user_role_name),
                       WATCHDOG_NOTICE);
            }
            $access_enabled = TRUE;
          }
          else if ($want_logging) {
            watchdog($prefix,
                     "check p:!productname userrole:!userrole NO", array('!productname' => $product->name,
                                                                         '!userrole' => $user_role_name),
                     WATCHDOG_NOTICE);
          }
        }
      }
      else if ($want_logging) {
        watchdog($prefix,
                 "p:!productname neither explicit nor default roles available", array('!productname' => $product->name),
                 WATCHDOG_NOTICE);
      }
      
      if (!$access_enabled) {
        unset($api_products[$id]);
        if ($want_logging) {
          watchdog($prefix,
                   "p:!productname disallowed", array('!productname' => $product->name),
                   WATCHDOG_NOTICE);
        }        
      }
      else if ($want_logging) {
        watchdog($prefix,
                 "p:!productname allowed", array('!productname' => $product->name),
                 WATCHDOG_NOTICE);
      }
    }
  }
  else if ($want_logging) {
    watchdog($prefix, "access control disabled", array("foo" => "bar"), WATCHDOG_NOTICE);
  }
}

/**
 * Creates the admin form for this module.
 */
function apiproduct_access_customattr_admin_form($form, &$form_state) {
  $prefix = apiproduct_access_customattr_modulename();

  $roles = user_roles(TRUE);
  $roles[DRUPAL_AUTHENTICATED_RID] = t('All logged-in developers');
  $num_roles = count($roles);

  $api_products = entity_load('api_product');
  $num_products = count($api_products);

  $tprefix = '<div class=\'' . $prefix  . '\'>';
  $tsuffix = '';
  $varname = $prefix . '_enabled';
  $fld_attributes = array('title' => t('This is the master switch for the role access check'));
  if (variable_get($varname, 0)) {
    $fld_attributes['checked'] = 'checked';
  }
  $form[$prefix][$varname] = array('#type'=>'checkbox',
                                   '#title'=>t('Access check enabled based on custom attribute ("role-access")'),
                                   '#prefix' => $tprefix,
                                   '#suffix' => $tsuffix,
                                   '#attributes' => $fld_attributes );

  $varname = $prefix . '_defaultroles';
  $default_roles = variable_get($varname, FALSE);
  if ($default_roles === FALSE) {
      $default_roles = array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID);
      //$default_roles = array( 0 => DRUPAL_AUTHENTICATED_RID);
  }
  else if (is_string($default_roles)) {
    $default_roles = explode(',', $default_roles);
  }

  $tprefix = '';
  //$tsuffix = '<div class=\'' . $prefix  . '\'>' . 'The custom attribute is: roles-acess.</div>';
  $tsuffix = '';
  $form[$prefix][$varname] = array(
       '#type' => 'checkboxes',
       '#title' => t('Roles to use for API products lacking the custom attribute:'),
       '#prefix' => $tprefix,
       '#suffix' => $tsuffix,
       '#options' => $roles,
       '#default_value' => $default_roles,
     );

  // want logging of module activities?
  $form[$prefix][$prefix . '_logging'] =
    array('#type'=>'radios',
          '#title'=> t('Verbose logging of module activities? Not recommended for continuous use in production.'),
          '#options'=>array(0=>t('Off'),1=>t('On')),
          '#prefix' => '',
          '#suffix' => '',
          '#required' => TRUE,
          '#default_value' => variable_get($prefix . '_logging', 0)
          );
  
  $form = system_settings_form($form);
  $submit_handler_function_name = apiproduct_access_customattr_modulename() . '_admin_form_submit';
  array_unshift($form['#submit'], $submit_handler_function_name);
  return $form;
}

function apiproduct_access_customattr_endsWith($haystack, $needle) {
    $length = strlen($needle);
    return $length === 0 || (substr($haystack, -$length) === $needle);
}

/**
 * Cleans up messy arrays generated by 'checkboxes' element.
 *
 * The checkbox array will have a value of zero for unchecked items, and have
 * the key value for checked items, for example: [2=>2, 3=>3, 4=>0].
 *
 * This function changes the array to save as just the values selected, for
 * the example above it will change to: [2,3].
 */
function apiproduct_access_customattr_admin_form_submit($form, &$form_state) {
  $prefix = apiproduct_access_customattr_modulename();
  foreach ($form_state['values'] as $key => $val) {
    if (apiproduct_access_customattr_endsWith($key, '_defaultroles')) {
      $transformed_array = array();
      foreach ($val as $item => $value) {
        if ($value) {
          $transformed_array[] = $item;
        }
      }
      $form_state['values'][$key] = implode(',', $transformed_array);
    }
  }
}
